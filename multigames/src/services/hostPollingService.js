// services/hostPollingService.js
import { apiService } from '@/services/api.js';

class HostPollingService {
  constructor() {
    // IMPORTANTE: pollingInterval guarda el "ID" del temporizador que crea setInterval()
    // Es como un "ticket" que nos permite cancelar el temporizador despu√©s
    this.pollingInterval = null;
    // Indica si el servicio est√° haciendo polling actualmente
    this.pollingIsRunning = false;
    // Referencia al store de Vuex (se asigna en init())
    this.store = null;
    // Datos de la interacci√≥n actual que estamos monitoreando
    this.currentInteraction = null;
    
    // Funciones que se ejecutar√°n cuando cambie el estado de la interacci√≥n
    this.callbacks = {
      onAccepted: null,   // Se ejecuta si el guest acepta
      onRejected: null,   // Se ejecuta si el guest rechaza  
      onPending: null,    // Se ejecuta mientras sigue esperando
      onTimeout: null     // Callback para cuando se agota el tiempo
    };

    // NUEVO: Sistema de conteo
    this.attemptCount = 0;      // Contador de intentos actuales
    this.maxAttempts = 30;      // M√°ximo de intentos por defecto
  }

  // Inicializar el servicio con el store de Vuex
  init(store) {
    this.store = store;  // Guardamos referencia al store
    console.log('üîÑ HostPollingService inicializado');
  }

  // Configurar qu√© funciones ejecutar seg√∫n el resultado
  setCallbacks(onAccepted, onRejected, onPending = null, onTimeout = null) {
    this.callbacks.onAccepted = onAccepted;   // Funci√≥n desde Play.vue
    this.callbacks.onRejected = onRejected;   // Funci√≥n desde Play.vue
    this.callbacks.onPending = onPending;     // Funci√≥n desde Play.vue
    this.callbacks.onTimeout = onTimeout || null;     // Funci√≥n para manejar timeout
  }

  // Iniciar polling para una interacci√≥n espec√≠fica
  startPolling(interactionId, userId) {
    // Si ya est√° haciendo polling, parar el anterior
    if (this.pollingIsRunning) {
      this.stopPolling(); // Limpiar el anterior
    }

    console.log(`üöÄ Iniciando polling HOST para interacci√≥n ${interactionId} cada 5 segundos`);
    this.pollingIsRunning = true;
    // Guardar los datos de la interacci√≥n que vamos a monitorear
    this.currentInteraction = { id: interactionId, userId: userId };
    this.attemptCount = 0;

    // AQU√ç ES DONDE SE CREA EL TEMPORIZADOR:
    // setInterval() ejecuta la funci√≥n cada 5000ms (5 segundos)
    // y DEVUELVE un ID √∫nico que guardamos en pollingInterval
    this.pollingInterval = setInterval(() => {
      this.checkInteractionStatus();  // Esta funci√≥n se ejecuta cada 5 segundos
    }, 5000);
  }

  // Esta funci√≥n se ejecuta cada 5 segundos para verificar el estado
  async checkInteractionStatus() {
    // Incrementar contador
    this.attemptCount++;
    // console.log(`üìä Intento ${this.attemptCount}/${this.maxAttempts} (Total: ${this.totalAttempts})`);

    if (!this.currentInteraction) {
      console.warn('‚ö†Ô∏è No hay interacci√≥n actual, detengo el polling Focus');
      this.stopPolling();
      return;
    }

    try {
      // llamamos a la API para verificar el estado actual de la interaccion
      const result = await apiService.pollInteractionStatus(this.currentInteraction.id, this.currentInteraction.userId );
      console.log(`üìä Estado de interacci√≥n (intento ${this.attemptCount}):`, result.status);

      // Seg√∫n el estado ...
      switch (result.status) {
        case 'pending':
            // Verificamos si se agotaron los intentos
            if (this.attemptCount >= this.maxAttempts) {
              console.log('‚è∞ Se agotaron los intentos, cancelando interaccion ...');
              this.stopPolling();
              if (this.callbacks.onTimeout) {
                this.callbacks.onTimeout(this.totalAttempts);
              }

              //TODO hayq ue hacer una llamada a back para cerar la interaccion
            } else {
              // Continuar esperando
              if (this.callbacks.onPending) {
                this.callbacks.onPending(result, this.attemptCount, this.maxAttempts);
              }
            }
            break;

        case 'accepted':
          // ¬°El guest acept√≥! - parar polling y mostrar modal de √©xito
          console.log('‚úÖ Interacci√≥n aceptada!');
          this.stopPolling();  // Parar el temporizador
          if (this.callbacks.onAccepted) {
            this.callbacks.onAccepted(result);  // Ejecuta funci√≥n desde Play.vue (modal √©xito)
          }
          break;

        case 'rejected':
          // El guest rechaz√≥ - parar polling y mostrar modal de rechazo
          console.log('‚ùå Interacci√≥n rechazada');
          this.stopPolling();
          if (this.callbacks.onRejected) {
            this.callbacks.onRejected(result);  // Ejecuta funci√≥n desde Play.vue (modal rechazo)
          }
          break;

        default:
          // Estado que no esper√°bamos - solo log
          console.log('‚ö†Ô∏è Estado desconocido:', result.status);
          break;
      }

    } catch (error) {
      console.error('‚ùå Error verificando estado de interacci√≥n:', error);
      // Si hay error, mejor parar el polling para no saturar el servidor
      this.stopPolling();
    }
  }

  // Cancelar completamente sin m√°s extensiones
  cancelPolling() {
    console.log('üö´ Polling Focus cancelado');
    this.stopPolling();
  }

  // Parar completamente el polling
  stopPolling() {
    // SI tenemos un temporizador activo (pollingInterval no es null)
    if (this.pollingInterval) {
      
      // CLEARINTERVAL ES UNA FUNCI√ìN NATIVA DE JAVASCRIPT:
      // Le pasas el ID del temporizador y lo cancela
      clearInterval(this.pollingInterval);
      
      // Resetear la variable a null para indicar que no hay temporizador
      this.pollingInterval = null;
    }
    
    // Marcar como inactivo
    this.pollingIsRunning = false;
    // Limpiar datos de la interacci√≥n actual
    this.currentInteraction = null;

    // Mantener contadores para historial
    console.log(`‚èπÔ∏è Polling HOST detenido despu√©s de ${this.attemptCount} intentos`);
  }

  // Getter para obtener estad√≠sticas
  get stats() {
    return {
      isPolling: this.pollingIsRunning,
      attemptCount: this.attemptCount,
      maxAttempts: this.maxAttempts,
      timeElapsed: this.totalAttempts * 5 // segundos transcurridos
    };
  }

  // Getter para verificar si est√° activo desde fuera
  get isPolling() {
    return this.pollingIsRunning;
  }
}

// Crear UNA instancia del servicio que se compartir√° en toda la app
export const hostPollingService = new HostPollingService();